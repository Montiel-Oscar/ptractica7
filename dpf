class Node:
    to = 0
    cost = 0
    nxt = None
    #DFS
    prev = None
    # COLOR: 0-WHITE, 1-GRAY, 2-BLACK
    color = 0
    #distance & final distance
    distance = -1
    final = -1

class Graph:
    edges = []
    grade = []
    time = 0


    def __init__(self, numNodes, numEdges, directed, cost):

        self.numNodes = numNodes
        self.numEdges = numEdges
        self.directed = True if directed == 1 else False
        self.hasCost = True if cost == 1 else False

        i = 0
        while i <= self.numNodes:
            self.grade.append(0)
            self.edges.append(None)
            i += 1

    def insert_edge(self, intU, intV, intCost, isDirected):
        item = Node()
        item.cost = intCost
        item.to = intV
        item.nxt = self.edges[intU]

        self.edges[intU] = item
        self.grade[intU] += 1

        if isDirected == False and intV != intU:
            self.insert_edge(intV,intU,intCost, True)

    def read_edges (self):
        i = 1
        while i<= self.numEdges:
            u = int(input('u: '))
            v = int(input('v: '))
            if self.hasCost == True:
                cost = input('Cost / weight: ')
            else:
                cost = 1

            self.insert_edge( u, v, cost, self.directed)
            i += 1

    def print(self):
        i = 1
        item = None
        string = ""
        while i <= self.numNodes:
            string += str(i) + "\t"
            item = self.edges[i]
            while item is not None:
                string += str(item.to) + ": " + str(item.cost) + "\t"
                item = item.nxt

            string += "\n"
            i += 1
        print(string)

    def depth_first_search(self):
        i = 1
        while i <= self.numNodes:
            if self.edges[i] != None:
                if self.edges[i].color == 0:
                    self.DFS_visit(i)
            i += 1

    def DFS_visit(self, u):
        self.edges[u].color = 1
        self.time += 1
        self.edges[u].distance = self.time

        v = self.edges [u]
        while v != None:
            if self.edges [v.to] != None:
                if self.edges [v.to].color == 0:
                    self.edges[v.to].prev = self.edges[u]
                    self.DFS_visit(v.to)
            v = v.nxt

        self.edges[u].color = 2
        self.time += 1
        self.edges[u].final = self.time

    def print_color(self):
        i = 1
        print("\nDEPTH FIRST SEARCH:")

        string = ""
        while i <= self.numNodes:
            if self.edges[i] != None:
                color = "blank" if self.edges[i].color == 0 else "gray" if self.edges[i].color == 1 else "black"
                string += str(i) + ": " + color + "-" + str(self.edges[i].distance) + "-" + str(self.edges[i].final)+ "\t"
                string += "\n"

            i += 1

        print(string)

def main():
    nodes = int(input("Vertex number?"))
    edges = int(input("Edges number?"))
    isDirected= int(input("It is directed? 1) YES, 2)NO: "))
    hasCost = int(input("Edge's cost? 1) YES, 2)NO: "))

    objGraph = Graph(nodes, edges, isDirected, hasCost)
    objGraph.read_edges()
    objGraph.print()
    objGraph.depth_first_search()
    objGraph.print_color()

if __name__ == '__main__':
    main()
